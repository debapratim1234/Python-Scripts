# -*- coding: utf-8 -*-
"""Merge Sort.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z3sgw5IfraO2NfUVCD-MiW1_-JNFVuLo
"""

# Merging of two lists
def merge(A,B):  # Merge A[0:m],B[0,n]
  (C,m,n) = ([],len(A),len(B))
  (i,j) = (0,0) # Current positions of A,B
  while i+j<m+n: # i+j is the number of elements merged so far
    if i==m: # Case1 : A is empty
      C.append(B[j])
      j = j+1
    elif j==n: #Case2 : B is empty
      C.append(A[i])
      i = i+1
    elif A[i]<=B[j]: # Case3 : Head of A is smaller
      C.append(A[i])
      i = i+1
    elif A[i]>=B[j]: # Case4 : Head of B is smaller
      C.append(B[j])
      j = j+1
  return C

# Applying Merge-sort
def mergesort(A,left,right):
  # Sort the slice A[left:right]
  if right-left<=1: # Base-case
    return A[left:right]
  if right-left>1: # Recursive-call
    mid = (left+right)//2 
    L = mergesort(A,left,mid)
    R = mergesort(A,mid,right)
  return merge(L,R)

# A = [1,3,2,5,2,9]
# left=0
# right=6
# mergesort(A,left,right)

